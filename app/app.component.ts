/** Компоненты
 * Основной идеей Angular 2, как и большенства современных фреймворкрв, являються компоненты.
 * Компоненты представляют из себя часть пользовательского интерфейса, это может быть:
 *     - что-то маленькое, вроде кнопки,
 *     - что-то среднее, типа виджета погоды,
 *     - или что-то большое - целое приложение
 * в сравнении с Angular JS, компоненты в Angular 2 являються аналогами пользовательских дирректив
 *
 * ...
 * 
 *  Диррективы
 * ^ - можно представить как пользовательские атрибуты HTML, позволяющий добавлять элементам новый функционал.
 *   структурные: - изменяют структуру DOM
 *      *ngFor="" позволяют: добавлять, изменять, удалять - елементы
 *      *ngIf=""  отображает елемент в зависимости от результата выражения
 * 
 *   атрибутные: - предназначены для изменения внешнего вида или поведения DOM елементов, не создают и не удаляют елементы
 *    [ngClass]="" отображает класс в зависимости от результата выражения
 * 
 * ...
 * 
 *  Привязка данных
 * ^ - в Angular 2 есть две разновидности привязки данных: привязка свойств и привязка событий, шаблонные теги{{интерполяция}} - 
 *      являеться упрощенным вариантом привязки к текстовому содержанию елемента, т.к. привяке к свойству: [innerText]=""
 * 
 *      {{ Template expression }}
 *          - Angular выполняет выражение и присваивает его свойству объекта привязки; 
 *          Целью может быть HTML-элемент, компонент или директива.
 * 
 *      Property Binding 
 *          - привязка свойства, можно привязаться к ЛЮБОМУ свойству DOM елемента
 *          у каждого DOM елемента есть набор свойств, пример: в this HTML
 *          [innerText]="properties || expression"
 * 
 *      Event Binding 
 *          - привязка событий, можно привязаться к ЛЮБОМУ событию DOM елемента
 *          у каждого DOM елемента есть набор событий.
 *          в Angular 2 у таких событий как: onclick, onkeyup, onmousemove и др.
 *          в названии отброшен префикс on : click, keyup, mousemove ...
 *          пример: в this HTML
 *          (click)="method($event || properties)" в качестве аргумента 
 *                               Template переменная ссылающаяся на нужный объект
 * 
 *      [(ngModel)]="" - с двустороняя привязка данных, привязка к свойству [] + к событию ()
 * 
 * ...
 *
 *  Template Reference Variable  - шаблонная переменная
 *   <input type="text" #titleInput> - переменная titleInput, будет доступна в пределах шаблона компонента
 * 
 * ...
 *
 * Декомпозиция
 *  - процесс, разделения приложения на части/компоненты
 *  Идея компонентов заключается в том что бы, разделить пользовательский интерфейс на составные части.
 *   Это делаеться для того, что бы:
 *   во 1х: упростить приложение, структурировав его
 *   во 2х: такой подход, позволяет повторно использовать повторяющиеся части
 * 
 * ...
 * 
 * #9: Взаимодействие компонентов
 *  - приложение разделенно на 3 основных компонента:
 *  1е что нужно сделать, передать в компонент TodoItemComponent данные о задаче.
 *  
 *  есть несколько способов взаимодействия родителей и детей:
 *  - события. подписка на события пользовательских компонентов реализуется так же как и на события DOM елементов:
 *      - нужно определить событие (с точки зрения разметки, выглядит это точно так же как и привязка к событиям DOM элементов)
 *        у дочернего компонента, и у родительского компонента **<.. (childComponentEvent)="parentComponentEvent()"><..>**
 * 
 * -- приложение работает правильно, Но, методы для работы  задачами распределись по компонентам:
 *  - отметка задач происходит в компонете TodoItem
 *  - удаление задач в компонете TodoList
 *  - и добавление в компонете App
 *  намного удобнее реализовать логику в одном месте -> service
 * 
 * ...
 * 
 * #10: Сервисы
 *  Одним из вариантов разделения ответсвенности между различными частями приложения явл. сервисы
 *      традиционно в сервисы помещаеться логика(т.е. непосредственная работа с данными приложения)
 *    в Angular 2 за внешний вид отвечаеют компоненты а сервисы за работу с данными
 * 
 * ... 
 * #11: Http
 * AngularInMemoryWebApi
 *  фэйковый сервер, модуль симулирует работу веб сервера.
 *  умеет обрабатывать запросы на: полусение, создание, удаление и редактирование
 *  '' Запись в systemjs.config.js: 'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'
 * 
 */
import { Component } from "@angular/core";
import { Todo } from "./shared/todo";


@Component({
    moduleId: module.id,
    selector: 'app', // <app></app>        тег HTML
    templateUrl:'app.component.html',   // template:'<h1>AngulAR 2do</h1>', 
    styleUrls: ['app.component.css']    // styles: `header { background: #232323; }`
})
export class AppComponent {
    title: string = 'Angular 2DO'; // таким образом, добавлять свойства классу можно только в TypeScript
}